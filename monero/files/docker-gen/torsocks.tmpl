{{ $CurrentContainer := where $ "ID" .Docker.CurrentContainerID | first }}

{{ define "upstream" }}
	{{ if .Address }}
		{{ if .Network }}
TorAddress {{ .Network.IP }}
		{{ end }}
	{{ end }}
{{ end }}

{{ range $name, $containers := groupByMulti $ "Env.ONIONBOAT_HOSTNAME" "," }}

# {{ $name }}
{{ range $container := $containers }}
	{{ $addrLen := len $container.Addresses }}
# {{ $addrLen }}

	{{ range $knownNetwork := $CurrentContainer.Networks }}
		{{ range $containerNetwork := $container.Networks }}
# {{ $knownNetwork.Name }} {{ $containerNetwork.Name }}
			{{ if eq $knownNetwork.Name $containerNetwork.Name }}
				{{/* If only 1 port exposed, use that */}}
				{{ if eq $addrLen 1 }}
					{{ $address := index $container.Addresses 0 }}
# {{ $address }}
					{{ template "upstream" (dict "Container" $container "Address" $address "Network" $containerNetwork) }}
				{{/* If more than one port exposed, use the one matching ONIONBOAT_PORT env var, falling back to standard web port 80 */}}
				{{ else }}
					{{ $port := coalesce $container.Env.ONIONBOAT_PORT "9050" }}
					{{ $address := where $container.Addresses "Port" $port | first }}
# {{ $address }} {{ $port }}
					{{ template "upstream" (dict "Container" $container "Address" $address "Network" $containerNetwork) }}
				{{ end }}
			{{ end }}
		{{ end }}
	{{ end }}
{{ end }}
{{ end }}

AllowInbound 1
